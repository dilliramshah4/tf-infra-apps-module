name: Deploy Azure Key Vault

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy
      resource_group_name:
        description: "Resource Group Name"
        required: true
      resource_group_location:
        description: "Azure Region (optional, defaults to eastus)"
        required: false
        default: ""
      key_vault_name:
        description: "Key Vault Name (globally unique, 3-24 chars, no dashes at start/end)"
        required: true

env:
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_CONTAINER: "tf-infra"
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  # Unique state file per resource group and key vault
  TFSTATE_KEY: ${{ github.event.inputs.resource_group_name }}-${{ github.event.inputs.key_vault_name }}.tfstate

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./modules/key_vault # Adjust if your code is elsewhere!

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      # Minimal backend configuration, specifics set at init via CLI
      - name: Create minimal backend.tf
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "azurerm" {}
          }
          EOF

      # Use backend config from env vars for uniqueness
      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="storage_account_name=${{ env.AZURE_STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ env.AZURE_STORAGE_CONTAINER }}" \
            -backend-config="key=${{ env.TFSTATE_KEY }}" \
            -backend-config="access_key=${{ env.AZURE_STORAGE_KEY }}"

      - name: Terraform Validate
        run: terraform validate

      - name: Set Region with Default
        id: set_region
        run: |
          if [ -z "${{ github.event.inputs.resource_group_location }}" ]; then
            echo "region=eastus" >> $GITHUB_OUTPUT
          else
            echo "region=${{ github.event.inputs.resource_group_location }}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan (Apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          terraform plan -input=false \
            -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
            -var="resource_group_location=${{ steps.set_region.outputs.region }}" \
            -var="key_vault_name=${{ github.event.inputs.key_vault_name }}" \
            -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
            -out=tfplan

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -input=false -auto-approve tfplan

      - name: Terraform Plan Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: |
          terraform plan -destroy -input=false \
            -var="resource_group_name=${{ github.event.inputs.resource_group_name }}" \
            -var="resource_group_location=${{ steps.set_region.outputs.region }}" \
            -var="key_vault_name=${{ github.event.inputs.key_vault_name }}" \
            -var="subscription_id=${{ env.AZURE_SUBSCRIPTION_ID }}" \
            -out=tfdestroy

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform apply -input=false -auto-approve tfdestroy
